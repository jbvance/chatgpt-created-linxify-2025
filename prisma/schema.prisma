// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String     @id @default(cuid())
  name                   String?
  email                  String?    @unique
  hashedPassword         String?
  resetPasswordToken     String?    @unique
  resetPasswordTokenExpiry DateTime?
  emailVerified          DateTime?
  image                  String?
  createdAt              DateTime   @default(now())
  updatedAt              DateTime   @updatedAt
  accounts               Account[]
  sessions               Session[]
  links                  Link[]
  categories             Category[]
  highlights             Highlight[]
}

model Link {
  id              Int         @id @default(autoincrement())
  url             String
  linkTitle       String      @map("link_title")
  linkDescription String?     @map("link_description")
  faviconUrl      String?     @map("favicon_url")
  imageUrl        String?
  archivedContent String?     @db.Text
  summary         String?     @db.Text
  tags            String[]
  createdAt       DateTime    @default(now()) @map("created_at")
  updatedAt       DateTime    @updatedAt
  user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String      @map("user_id")
  categories      LinkCategory[]
  highlights      Highlight[]
}

model Category {
  id                  Int            @id @default(autoincrement())
  categoryDescription String         @map("category_description")
  createdAt           DateTime       @default(now()) @map("created_at")
  updatedAt           DateTime       @updatedAt
  user                User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId              String         @map("user_id")
  links               LinkCategory[]
}

model LinkCategory {
  link       Link     @relation(fields: [linkId], references: [id], onDelete: Cascade)
  linkId     Int      @map("link_id")
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId Int      @map("category_id")

  @@id([linkId, categoryId])
  @@map("link_categories")
}

model Highlight {
  id        Int      @id @default(autoincrement())
  text      String   @db.Text
  note      String?  @db.Text
  createdAt DateTime @default(now())
  link      Link     @relation(fields: [linkId], references: [id], onDelete: Cascade)
  linkId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
}

// NextAuth required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?   @db.Text
  access_token      String?   @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?   @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
